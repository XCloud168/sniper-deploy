services:
  # 共享API配置模板
  api-shared: &api-shared
    image: sniper-api:${VERSION:-latest}
    user: "1000:1000"
    env_file:
      - .env
    volumes:
      - ./logs:/app/logs:rw
      - ./config:/app/config:ro
      - ./license.lic:/app/license.lic:rw
    restart: "unless-stopped"
    networks:
      - backend
    profiles:
      - donotstart

  # 数据库迁移服务
  db-migrate:
    <<: *api-shared
    profiles: []
    container_name: sniper-migrate-db
    entrypoint: ["python", "-m", "alembic", "upgrade", "head"]
    restart: "no"
    depends_on:
      postgres:
        condition: service_healthy

  # 信号处理服务
  signal:
    <<: *api-shared
    profiles: []
    container_name: sniper-signal
    command: "signal"
    depends_on:
      postgres:
        condition: service_healthy

  # 快照服务
  snapshot:
    <<: *api-shared
    profiles: []
    container_name: sniper-snapshot
    command: "snapshot"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy

  # 交易服务
  trade:
    <<: *api-shared
    profiles: []
    container_name: sniper-trade
    command: "trade"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy

  # API服务
  api:
    <<: *api-shared
    profiles: []
    container_name: sniper-api
    command: "api"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/ping"]
      interval: 5s
      timeout: 3s
      retries: 3
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy

  # 前端服务
  frontend:
    image: sniper-frontend:${VERSION:-latest}
    container_name: sniper-ui
    restart: "unless-stopped"
    user: "1000:1000"
    environment:
      - NEXT_PUBLIC_API_URL=/api/v1
      - NEXT_TELEMETRY_DISABLED=1
      - NEXT_DISABLE_TURBOPACK=1
    volumes:
      - frontend_cache:/app/.next/cache
    networks:
      - backend

  # Redis缓存服务
  redis:
    image: redis:latest
    container_name: sniper-redis
    restart: "unless-stopped"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 3s
      retries: 3
    networks:
      - backend

  # PostgreSQL数据库服务
  postgres:
    image: docker.io/library/postgres:16-alpine
    container_name: sniper-postgres
    restart: "unless-stopped"
    environment:
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=postgres
    volumes:
      - ./data/postgres_data:/var/lib/postgresql/data
      - ./scripts/init_postgres.sql:/docker-entrypoint-initdb.d/init_postgres.sql:ro
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "postgres", "-d", "postgres"]
      interval: 5s
      timeout: 3s
      retries: 3
    networks:
      - backend

  # Nginx反向代理服务
  nginx:
    image: nginx:1.25
    container_name: sniper-nginx
    restart: "unless-stopped"
    volumes:
      - ./nginx:/etc/nginx/
    ports:
      - 9000:80
    depends_on:
      - frontend
      - api
    networks:
      - backend

networks:
  backend:
    driver: bridge

volumes:
  frontend_cache:
