services:
  n8n-shared: &n8n-shared
    image: docker.n8n.io/n8nio/n8n:latest
    restart: unless-stopped
    volumes:
      - n8n_storage:/home/node/.n8n:rw
    env_file:
      - .env
    environment:
      - WEBHOOK_URL=${WEBHOOK_URL}
      - N8N_ENCRYPTION_KEY=${ENCRYPTION_KEY}
      - N8N_RUNNERS_ENABLED=true
      - GENERIC_TIMEZONE=Asia/Shanghai
      - TZ=Asia/Shanghai
      - DB_TYPE=postgresdb
      - DB_POSTGRESDB_HOST=${POSTGRES_HOST}
      - DB_POSTGRESDB_PORT=${POSTGRES_PORT}
      - DB_POSTGRESDB_DATABASE=${POSTGRES_DB}
      - DB_POSTGRESDB_USER=${POSTGRES_USER}
      - DB_POSTGRESDB_PASSWORD=${POSTGRES_PASSWORD}
      - EXECUTIONS_MODE=queue
      - QUEUE_BULL_REDIS_HOST=redis
      - QUEUE_BULL_REDIS_PORT=6379
      - QUEUE_HEALTH_CHECK_ACTIVE=true
    links:
      - redis
      - postgres
    depends_on:
      redis:
        condition: service_healthy
    networks:
      - backend
    profiles:
      - donotstart

  api-shared: &api-shared
    image: sniper-api:${VERSION:-latest}
    user: "1000:1000"
    env_file:
      - .env
    volumes:
      - ./logs:/app/logs:rw
      - ./config:/app/config:ro
      - ./license.lic:/app/license.lic:rw
    restart: "unless-stopped"
    networks:
      - backend
    profiles:
      - donotstart

  db-migrate:
    <<: *api-shared
    profiles: []
    container_name: sniper-migrate-db
    entrypoint: ["python", "-m", "alembic", "upgrade", "head"]
    restart: "no"
    depends_on:
      postgres:
        condition: service_healthy

  signal:
    <<: *api-shared
    profiles: []
    container_name: sniper-signal
    command: "signal"
    depends_on:
      postgres:
        condition: service_healthy

  snapshot:
    <<: *api-shared
    profiles: []
    container_name: sniper-snapshot
    command: "snapshot"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy

  trade:
    <<: *api-shared
    profiles: []
    container_name: sniper-trade
    command: "trade"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy

  api:
    <<: *api-shared
    profiles: []
    container_name: sniper-api
    command: "api"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/ping"]
      interval: 5s
      timeout: 3s
      retries: 3
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy

  frontend:
    image: sniper-frontend:${VERSION:-latest}
    container_name: sniper-ui
    restart: "unless-stopped"
    user: "1000:1000"
    environment:
      - NEXT_PUBLIC_API_URL=/api/v1
      - NEXT_TELEMETRY_DISABLED=1
      - NEXT_DISABLE_TURBOPACK=1
    volumes:
      - frontend_cache:/app/.next/cache
    networks:
      - backend

  n8n:
    <<: *n8n-shared
    profiles: []
    ports:
      - "5678:5678"

  n8n-worker:
    <<: *n8n-shared
    profiles: []
    command: worker
    depends_on:
      - n8n
    networks:
      - backend

  redis:
    image: redis:latest
    container_name: sniper-redis
    restart: "unless-stopped"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 3s
      retries: 3
    networks:
      - backend
  postgres:
    image: docker.io/library/postgres:16-alpine
    container_name: sniper-postgres
    restart: "unless-stopped"
    environment:
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=postgres
    volumes:
      - ./data/postgres_data:/var/lib/postgresql/data
      - ./scripts/init_postgres.sql:/docker-entrypoint-initdb.d/init_postgres.sql:ro
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "postgres", "-d", "postgres"]
      interval: 5s
      timeout: 3s
      retries: 3
    networks:
      - backend

  nginx:
    image: nginx:1.25
    container_name: sniper-nginx
    restart: "unless-stopped"
    volumes:
      - ./nginx/nginx-server.conf:/etc/nginx/nginx.conf:ro
    ports:
      - 9000:80
    depends_on:
      - frontend
      - api
    networks:
      - backend

  centrifugo:
    image: centrifugo/centrifugo:latest
    restart: unless-stopped
    ulimits:
      nofile:
        soft: 65535
        hard: 65535
    volumes:
      - ./centrifugo:/centrifugo
    command: ["centrifugo", "--config", "/centrifugo/config.json"]
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - backend

networks:
  backend:
    driver: bridge

volumes:
  frontend_cache:
  n8n_storage:
